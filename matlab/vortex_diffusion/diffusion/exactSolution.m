function [h_exact] = exactSolution(nodes, t)
gamma = 5;
rho0 = 3;
vortex_time=3;
alpha = 0.5; 
t

% alpha = diffusion coeff
% t = time for diffusion equation
% vortex_time = snapshot in time chosen for initial condition

% We scale the initial condition by the exponential (this causes decay in
% the solution according alpha
h_exact = exactVortexRollup(nodes, gamma, rho0, vortex_time) * exp(- (alpha * t)); 

end

function [h_exact] = exactVortexRollup(nodes, gamma, rho0, t)

[PI,TI,rtemp] = cart2sph(nodes(:,1),nodes(:,2),nodes(:,3));

[w_exact rho_p_exact] = angular_velocitySphericalCoords(PI, TI, t, rho0);
h_exact = 1 - tanh((rho_p_exact./gamma).*sin(PI - w_exact.*t));

end




function [val] = Lsfc_h(phi, th, t, rho0, gamma)
%% Exact surface laplacian (Laplace-Beltrami operator) of the vortex
%% roll-up solution given at time t. NOTE: this is the laplacian of the
%% INITIAL condition, and not the solution in time. To get the
%% laplacian solution in time we take the output from this and multiply by
%% e^{-lambda t}
%
%% DERIVED BY EVAN IN MATHEMATICA:
%
%rho0 = 3;
%gamma = 5;

rho_p = rho0*cos(th);

% General case
val = sech((rho0.*cos(th).*sin(phi - (3.*sqrt(3).*t.*sec(th).*sech(rho0.*cos(th)).^2.*tanh(rho0.*cos(th)))./(2.0.*rho0)))./gamma).^2.*tan(th).* ...
    (-((rho0.*sin(th).*sin(phi - (3.*sqrt(3).*t.*sec(th).*sech(rho0.*cos(th)).^2.*tanh(rho0.*cos(th)))./(2.0.*rho0)))./gamma) + ...
    (rho0.*cos(th).*cos(phi - (3.*sqrt(3).*t.*sec(th).*sech(rho0.*cos(th)).^2.*tanh(rho0.*cos(th)))./(2.0.*rho0)).* ...
    ((3.*sqrt(3).*t.*sech(rho0.*cos(th)).^4.*tan(th))./2.0 - (3.*sqrt(3).*t.*sec(th).*sech(rho0.*cos(th)).^2.*tan(th).*tanh(rho0.*cos(th)))./(2.0.*rho0) - ...
    3.*sqrt(3).*t.*sech(rho0.*cos(th)).^2.*tan(th).*tanh(rho0.*cos(th)).^2))./gamma) -  ...
    sech((rho0.*cos(th).*sin(phi - (3.*sqrt(3).*t.*sec(th).*sech(rho0.*cos(th)).^2.*tanh(rho0.*cos(th)))./(2.0.*rho0)))./gamma).^2.* ...
    (-((rho0.*cos(th).*sin(phi - (3.*sqrt(3).*t.*sec(th).*sech(rho0.*cos(th)).^2.*tanh(rho0.*cos(th)))./(2.0.*rho0)))./gamma) - ...
    (2.*rho0.*cos(phi - (3.*sqrt(3).*t.*sec(th).*sech(rho0.*cos(th)).^2.*tanh(rho0.*cos(th)))./(2.0.*rho0)).*sin(th).* ...
    ((3.*sqrt(3).*t.*sech(rho0.*cos(th)).^4.*tan(th))./2.0 - (3.*sqrt(3).*t.*sec(th).*sech(rho0.*cos(th)).^2.*tan(th).*tanh(rho0.*cos(th)))./(2.0.*rho0) - ...
    3.*sqrt(3).*t.*sech(rho0.*cos(th)).^2.*tan(th).*tanh(rho0.*cos(th)).^2))./gamma - ...
    (rho0.*cos(th).*sin(phi - (3.*sqrt(3).*t.*sec(th).*sech(rho0.*cos(th)).^2.*tanh(rho0.*cos(th)))./(2.0.*rho0)).* ...
    ((3.*sqrt(3).*t.*sech(rho0.*cos(th)).^4.*tan(th))./2.0 - (3.*sqrt(3).*t.*sec(th).*sech(rho0.*cos(th)).^2.*tan(th).*tanh(rho0.*cos(th)))./(2.0.*rho0) - ...
    3.*sqrt(3).*t.*sech(rho0.*cos(th)).^2.*tan(th).*tanh(rho0.*cos(th)).^2).^2)./gamma + ...
    (rho0.*cos(th).*cos(phi - (3.*sqrt(3).*t.*sec(th).*sech(rho0.*cos(th)).^2.*tanh(rho0.*cos(th)))./(2.0.*rho0)).* ...
    ((3.*sqrt(3).*t.*sec(th).^2.*sech(rho0.*cos(th)).^4)./2.0 + (3.*sqrt(3).*t.*sech(rho0.*cos(th)).^4.*tan(th).^2)./2.0 - ...
    (3.*sqrt(3).*t.*sec(th).^3.*sech(rho0.*cos(th)).^2.*tanh(rho0.*cos(th)))./(2.0.*rho0) + ...
    12.*sqrt(3).*rho0.*t.*sech(rho0.*cos(th)).^4.*sin(th).*tan(th).*tanh(rho0.*cos(th)) - ...
    (3.*sqrt(3).*t.*sec(th).*sech(rho0.*cos(th)).^2.*tan(th).^2.*tanh(rho0.*cos(th)))./(2.0.*rho0) - ...
    3.*sqrt(3).*t.*sec(th).^2.*sech(rho0.*cos(th)).^2.*tanh(rho0.*cos(th)).^2 - 3.*sqrt(3).*t.*sech(rho0.*cos(th)).^2.*tan(th).^2.*tanh(rho0.*cos(th)).^2 - ...
    6.*sqrt(3).*rho0.*t.*sech(rho0.*cos(th)).^2.*sin(th).*tan(th).*tanh(rho0.*cos(th)).^3))./gamma) + ...
    2.*sech((rho0.*cos(th).*sin(phi - (3.*sqrt(3).*t.*sec(th).*sech(rho0.*cos(th)).^2.*tanh(rho0.*cos(th)))./(2.0.*rho0)))./gamma).^2.* ...
    (-((rho0.*sin(th).*sin(phi - (3.*sqrt(3).*t.*sec(th).*sech(rho0.*cos(th)).^2.*tanh(rho0.*cos(th)))./(2.0.*rho0)))./gamma) + ...
    (rho0.*cos(th).*cos(phi - (3.*sqrt(3).*t.*sec(th).*sech(rho0.*cos(th)).^2.*tanh(rho0.*cos(th)))./(2.0.*rho0)).* ...
    ((3.*sqrt(3).*t.*sech(rho0.*cos(th)).^4.*tan(th))./2.0 - (3.*sqrt(3).*t.*sec(th).*sech(rho0.*cos(th)).^2.*tan(th).*tanh(rho0.*cos(th)))./(2.0.*rho0) - ...
    3.*sqrt(3).*t.*sech(rho0.*cos(th)).^2.*tan(th).*tanh(rho0.*cos(th)).^2))./gamma).^2.* ...
    tanh((rho0.*cos(th).*sin(phi - (3.*sqrt(3).*t.*sec(th).*sech(rho0.*cos(th)).^2.*tanh(rho0.*cos(th)))./(2.0.*rho0)))./gamma) + ...
    sec(th).^2.*((rho0.*cos(th).*sech((rho0.*cos(th).*sin(phi - (3.*sqrt(3).*t.*sec(th).*sech(rho0.*cos(th)).^2.*tanh(rho0.*cos(th)))./(2.0.*rho0)))./gamma).^2.* ...
    sin(phi - (3.*sqrt(3).*t.*sec(th).*sech(rho0.*cos(th)).^2.*tanh(rho0.*cos(th)))./(2.0.*rho0)))./gamma + ...
    (2.*rho0.^2.*cos(th).^2.*cos(phi - (3.*sqrt(3).*t.*sec(th).*sech(rho0.*cos(th)).^2.*tanh(rho0.*cos(th)))./(2.0.*rho0)).^2.* ...
    sech((rho0.*cos(th).*sin(phi - (3.*sqrt(3).*t.*sec(th).*sech(rho0.*cos(th)).^2.*tanh(rho0.*cos(th)))./(2.0.*rho0)))./gamma).^2.* ...
    tanh((rho0.*cos(th).*sin(phi - (3.*sqrt(3).*t.*sec(th).*sech(rho0.*cos(th)).^2.*tanh(rho0.*cos(th)))./(2.0.*rho0)))./gamma))./gamma.^2);

% handle Poles
% NOTE: when th == 0, rhop == 0 and h == 1; Lapl(h) == 0.
val(abs(rho_p) < 4*eps) = 0;
end